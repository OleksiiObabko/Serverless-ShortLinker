service: nodejs-aws-lambda

custom:
  env: ${file(env.json)}

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  environment:
    PORT: ${self:custom.env.PORT}
    BASE_URL: ${self:custom.env.BASE_URL}
    ACCESS_SECRET: ${self:custom.env.ACCESS_SECRET}
    REFRESH_SECRET: ${self:custom.env.REFRESH_SECRET}
    ACCESS_LIFE_TIME: ${self:custom.env.ACCESS_LIFE_TIME}
    REFRESH_LIFE_TIME: ${self:custom.env.REFRESH_LIFE_TIME}
    NO_REPLY_EMAIL: ${self:custom.env.NO_REPLY_EMAIL}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - ses:*
            - sqs:*
          Resource: "*"

functions:
  app:
    handler: dist/app.handler
    events:
      - http: ANY /
      - http: ANY /{proxy+}
  deactivate-expired-links:
    handler: dist/crons/deactivateExpired.handler
    events:
      - schedule: rate(1 minute)

resources:
  Resources:
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: TestQueue
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    OauthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OauthTable
        AttributeDefinitions:
          - AttributeName: accessToken
            AttributeType: S
          - AttributeName: refreshToken
            AttributeType: S
        KeySchema:
          - AttributeName: accessToken
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: RefreshIndex
            KeySchema:
              - AttributeName: refreshToken
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    LinkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LinkTable
        AttributeDefinitions:
          - AttributeName: shortUrl
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: shortUrl
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
